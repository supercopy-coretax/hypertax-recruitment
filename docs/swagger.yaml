basePath: /api/v1
definitions:
  models.ErrorResponse:
    properties:
      reason:
        type: string
    type: object
  models.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      message:
        type: string
      token:
        type: string
    type: object
  models.LoginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.RegisterUserRequest:
    properties:
      address:
        type: string
      created_at:
        type: string
      date_of_birth:
        description: 'Format: YYYY-MM-DD'
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      npwp:
        type: string
      password:
        type: string
      password_confirmation:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.TaxPayersResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      npwp:
        type: string
      phone:
        type: string
      profile_picture_url:
        type: string
      tax_reports:
        items:
          $ref: '#/definitions/models.TaxReportResponse'
        type: array
    type: object
  models.TaxReportRequest:
    properties:
      tax_amount:
        type: number
      tax_category:
        type: string
      tax_period:
        type: integer
      user_id:
        type: integer
    type: object
  models.TaxReportResponse:
    properties:
      tax_amount:
        type: number
      tax_category:
        type: string
      tax_period:
        type: integer
    type: object
  models.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      npwp:
        type: string
      phone_number:
        type: string
      profile_picture_url:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.VoidResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Indonesian Tax API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Hypertax API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate user token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VoidResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User Registration Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.VoidResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Register new user
      tags:
      - auth
  /lapor:
    post:
      consumes:
      - application/json
      description: Submit a new tax report
      parameters:
      - description: Tax Report
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/models.TaxReportRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.VoidResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Submit tax report
      tags:
      - lapor
  /wajibpajak:
    get:
      consumes:
      - application/json
      description: Get all registered tax payers with optional filtering
      parameters:
      - description: Search by name, email, phone or NPWP
        in: query
        name: search
        type: string
      - description: Filter by tax payment start date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: Filter by tax payment end date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TaxPayersResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list of tax payers
      tags:
      - wajibpajak
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
      Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
